{"version":3,"sources":["features/pattern-input/components/Row/PatternRow.tsx","features/navigation/TopNav.tsx","features/navigation/BottomNav.tsx","features/pattern-input/components/Row/ButtonRow.tsx","features/pattern-input/components/FlagSelector/FlagSelector.tsx","features/text-display/components/Display/TextDisplay.tsx","app/hooks.ts","features/pattern/randomColor.ts","features/pattern/patternSlice.ts","features/pattern/patternSelectors.ts","features/pattern/transform.ts","features/pattern/index.ts","features/pattern-input/PatternInput.tsx","lib/regex/regexHelpers.ts","features/text-display/splitStringAtPairedIndicies.ts","features/text-display/TextDisplayContainer.tsx","features/text-display/components/HighlightOverlay/HighlightOverlay.tsx","features/text-display/components/Display/InputTextDisplay.tsx","lib/copy/copy.ts","features/text-display/components/Display/OutputTextDisplay.tsx","features/dashboard/HomeScreen.tsx","features/dashboard/ListMatchesScreen.tsx","features/dashboard/ReplaceScreen.tsx","features/not-found/NotFoundScreen.tsx","features/dashboard/routes.tsx","app/routes.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["PatternRowType","TopNav","className","path","to","BottomNav","ButtonRow","onClick","e","preventDefault","FLAGS","FlagSelector","visible","flags","onChangeFlags","initialState","map","f","includes","useState","selected","setSelected","uniqueId","Math","random","slice","join","i","type","id","checked","stopPropagation","onChange","idx","newState","selectedFlags","filter","handleChange","htmlFor","TextDisplayType","Pattern","pattern","listFormat","replace","color","focus","onClickRemove","onChangePattern","onChangeListFormat","onChangeReplace","isListType","PATTERN_LIST","operationValue","operationHandleChange","flagMenuVisible","setFlagMenuVisible","style","boxShadow","background","placeholder","value","target","PATTERN_ONLY","useAppDispatch","useDispatch","useAppSelector","useSelector","randomColor","hex","floor","toString","length","defaultOperation","operations","input","findOperationById","state","find","op","patternSlice","createSlice","name","reducers","add","newOperation","makeOperation","push","remove","action","payload","findIndex","last","splice","move","toIdx","Error","fromIdx","indexOf","setPattern","setFlags","setListFormat","setReplace","setInput","setFocus","actions","selectOperations","selectOperationIds","createSelector","selectOperation","selectOperationPattern","selectOperationFlags","selectOperationListFormat","selectOperationReplace","selectOperationColor","selectInput","selectFocus","transform","transforms","reduce","ag","result","formatter","format","prev","inputString","error","message","patternActions","patternSelectors","PatternInput","rows","dispatch","focusIdx","TextDisplay","React","forwardRef","ref","onScroll","before","after","readOnly","isInput","INPUT","unescapeString","str","match","matches","regex","RegExp","matchAll","exec","Array","from","v","startIdx","index","endIdx","replaceWith","list","group","specialPattern","p1","isNaN","Number","parseFloat","parseInt","splitStringAtPairedIndicies","indices","temp","inRange","HighlightOverlay","highlightRanges","highlightColor","k","InputTextDisplay","split","m","overlayRef","useRef","textareaRef","overlay","current","textArea","scrollTo","scrollLeft","scrollTop","copyEs6","text","a","navigator","clipboard","writeText","copyLegacy","el","document","createElement","body","appendChild","select","execCommand","removeChild","copy","CopyButton","OutputTextDisplay","OUTPUT","TextDisplayContainer","isListMode","LIST","ops","results","output","focusOp","inputValue","INPUT_ONLY","HomeScreen","ListMatchesScreen","ReplaceScreen","PATTERN_REPLACE","REPLACE","withRouter","props","location","pathname","Routes","exact","component","NotFoundScreen","DashboardScreen","App","store","configureStore","reducer","patternReducer","Boolean","window","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.56c210c6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport FlagSelector from '../FlagSelector';\nimport './PatternRow.css';\nimport './Row.css';\n\nenum PatternRowType {\n  PATTERN_ONLY,\n  PATTERN_LIST,\n  PATTERN_REPLACE,\n}\n\ninterface PatternRowProps {\n  type: PatternRowType;\n  pattern: string;\n  flags: string[];\n  listFormat: string;\n  replace: string;\n  color: string;\n  focus: boolean;\n  onClick: () => void;\n  onClickRemove: () => void;\n  onChangePattern: (pattern: string) => void;\n  onChangeFlags: (flags: string[]) => void;\n  onChangeListFormat: (listFormat: string) => void;\n  onChangeReplace: (replace: string) => void;\n}\n\nconst Pattern = ({\n  type,\n  pattern,\n  flags,\n  listFormat,\n  replace,\n  color,\n  focus,\n  onClick,\n  onClickRemove,\n  onChangePattern,\n  onChangeFlags,\n  onChangeListFormat,\n  onChangeReplace,\n}: PatternRowProps) => {\n  const isListType = type === PatternRowType.PATTERN_LIST;\n  const operationValue = isListType ? listFormat : replace;\n  const operationHandleChange = isListType\n    ? onChangeListFormat\n    : onChangeReplace;\n\n  const [flagMenuVisible, setFlagMenuVisible] = useState(false);\n\n  return (\n    <li\n      className=\"pattern-input__row\"\n      onClick={onClick}\n      style={{ ...(focus && { boxShadow: `inset 0 0 0px 2px ${color}` }) }}\n    >\n      <i\n        className=\"pattern-input__color-indicator\"\n        style={{ background: color }}\n      ></i>\n      <div className=\"pattern-input__input-group pattern-input__input-group--match\">\n        <label htmlFor=\"match-pattern-1\">Regex Pattern</label>\n        <div className=\"pattern-input__regex\">\n          /\n          <input\n            id=\"match-pattern-1\"\n            type=\"text\"\n            placeholder=\"<Regex Pattern Here>\"\n            value={pattern}\n            onChange={(e) => onChangePattern(e.target.value)}\n          />\n          /\n          <span className=\"pattern-input__flag\">\n            <span onClick={() => setFlagMenuVisible(!flagMenuVisible)}>\n              {flags.join('')}\n            </span>\n            <FlagSelector\n              visible={flagMenuVisible}\n              flags={flags}\n              onChangeFlags={onChangeFlags}\n            />\n          </span>\n          <div className=\"underline\"></div>\n        </div>\n      </div>\n      {type !== PatternRowType.PATTERN_ONLY && (\n        <div className=\"pattern-input__input-group pattern-input__input-group--operation\">\n          <label htmlFor=\"operation-pattern-1\">Regex Operation</label>\n          <input\n            type=\"text\"\n            id=\"operation-pattern-1\"\n            placeholder={\n              isListType ? '<List Formatting Here>' : '<Replace-With Here>'\n            }\n            value={operationValue}\n            onChange={(e) => operationHandleChange(e.target.value)}\n          />\n        </div>\n      )}\n      <button\n        className=\"button--transparent\"\n        onClick={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          onClickRemove();\n        }}\n      >\n        <i className=\"fas fa-times\"></i>\n      </button>\n    </li>\n  );\n};\n\nexport default Pattern;\nexport { PatternRowType };\n","import React from 'react';\nimport { Link, Route } from 'react-router-dom';\nimport './TopNav.css';\n\nconst TopNav = () => (\n  <nav className=\"top-nav\">\n    <ul className=\"top-nav__list\">\n      <li className=\"top-nav__item top-nav__item--title\">\n        <h1 className=\"top-nav__title\">samchencode</h1>\n      </li>\n      <Route path=\"/match\">\n        <li className=\"top-nav__item\">\n          <Link to=\"/match/list\">List Matches</Link>\n        </li>\n        <li className=\"top-nav__item\">\n          <Link to=\"/match/replace\">Replace</Link>\n        </li>\n      </Route>\n    </ul>\n  </nav>\n);\n\nexport default TopNav;\n","import React from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport './BottomNav.css';\n\nconst BottomNav = () => (\n  <Route path=\"/match\">\n    <nav className=\"bottom-nav\">\n      <ul className=\"bottom-nav__list\">\n        <li className=\"bottom-nav__item\">\n          <Link to=\"/match\">\n            <i className=\"bottom-nav__icon far fa-file-alt\"></i>\n            <div className=\"bottom-nav__label\">Input</div>\n          </Link>\n        </li>\n        <li className=\"bottom-nav__item\">\n          <Link to=\"/match/list\">\n            <i className=\"bottom-nav__icon fas fa-clipboard-list\"></i>\n            <div className=\"bottom-nav__label\">List</div>\n          </Link>\n        </li>\n        <li className=\"bottom-nav__item\">\n          <Link to=\"/match/replace\">\n            <i className=\"bottom-nav__icon fas fa-random\"></i>\n            <div className=\"bottom-nav__label\">Replace</div>\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  </Route>\n);\n\nexport default BottomNav;\n","import React from 'react';\nimport './Row.css';\n\ninterface ButtonRowProps {\n  onClick: () => void;\n}\n\nconst ButtonRow = ({ onClick }: ButtonRowProps) => (\n  <li className=\"pattern-input__row pattern-input__row--full\">\n    <button onClick={e => {\n      e.preventDefault();\n      onClick();\n    }}><i className=\"fas fa-plus\"></i></button>\n  </li>\n);\n\nexport default ButtonRow;","import React, { useState } from 'react';\nimport './style.css';\n\ninterface FlagSelectorProps {\n  visible: boolean;\n  flags: string[];\n  onChangeFlags: (flags: string[]) => void;\n}\n\nconst FLAGS = ['d', 'g', 'i', 'm', 's', 'u', 'y'];\n\nconst FlagSelector = ({ visible, flags, onChangeFlags }: FlagSelectorProps) => {\n  const initialState = FLAGS.map((f) => flags.includes(f));\n\n  const [selected, setSelected] = useState(initialState);\n\n  const handleChange = (idx: number) => {\n    const newState = selected.slice();\n    newState[idx] = !newState[idx];\n    setSelected(newState);\n    const selectedFlags = FLAGS.filter((f, i) => newState[i]);\n    onChangeFlags(selectedFlags);\n  };\n\n  const uniqueId = ('' + Math.random()).slice(2);\n\n  return (\n    <div\n      className={[\n        'flag-selector',\n        visible ? 'flag-selector--visible' : '',\n      ].join(' ')}\n    >\n      <ul className=\"flag-selector__list\">\n        {FLAGS.map((f, i) => (\n          <li className=\"flag-selector__item\" key={f}>\n            <input\n              type=\"checkbox\"\n              className=\"flag-selector__checkbox\"\n              id={'flag-selector__checkbox--' + f + uniqueId}\n              checked={selected[i]}\n              onClick={(e) => e.stopPropagation()}\n              onChange={() => handleChange(i)}\n            />\n            <label\n              htmlFor={'flag-selector__checkbox--' + f + uniqueId}\n              className=\"flag-selector__label\"\n            >\n              {f}\n            </label>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default FlagSelector;\n","import React from 'react';\nimport '../../style.css';\n\nenum TextDisplayType {\n  INPUT,\n  OUTPUT,\n}\n\ninterface TextDisplayProps {\n  type: TextDisplayType;\n  value: string;\n  placeholder?: string;\n  onChange?: (newValue: string) => void;\n  onScroll?: () => void;\n  before?: React.ReactNode;\n  after?: React.ReactNode;\n  readOnly?: boolean\n}\n\nconst TextDisplay = React.forwardRef<null, TextDisplayProps>(\n  (\n    {\n      type,\n      value,\n      placeholder,\n      onChange,\n      onScroll,\n      before,\n      after,\n      readOnly,\n    }: TextDisplayProps,\n    ref\n  ) => {\n    const isInput = type === TextDisplayType.INPUT;\n\n    return (\n      <div\n        className={[\n          'text-display',\n          isInput ? 'text-display--input' : 'text-display--output',\n        ].join(' ')}\n      >\n        <h3 className=\"text-display__label\">{isInput ? 'Input' : 'Output'}</h3>\n        <div className=\"text-display__content\">\n          {before}\n          <textarea\n            className=\"text-display__top\"\n            ref={ref}\n            placeholder={placeholder}\n            readOnly={!isInput || readOnly}\n            onScroll={onScroll}\n            onChange={onChange && ((e) => onChange(e.target.value))}\n            value={value}\n          />\n        </div>\n        {after}\n      </div>\n    );\n  }\n);\n\nexport default TextDisplay;\nexport { TextDisplayType };\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","const randomColor = () => {\n  let hex = '' + Math.floor(Math.random() * 16777215).toString(16);\n  while(hex.length < 6) {\n    hex = '0' + hex;\n  }\n  return '#' + hex;\n}\n\nexport default randomColor;","import { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport randomColor from './randomColor';\n\ninterface Operation {\n  id: number | string;\n  pattern: string;\n  flags: string[];\n  listFormat: string;\n  replace: string;\n  color: string;\n}\n\ntype PatternState = {\n  operations: Operation[];\n  input: string;\n  focus: number;\n};\n\nconst defaultOperation: Operation = {\n  id: 1,\n  pattern: '.*',\n  flags: ['g'],\n  listFormat: '[ $& ]',\n  replace: '$&',\n  color: '#ffd700',\n};\n\nconst defaultInput =\n  'Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem, doloremque.';\n\nconst initialState: PatternState = {\n  operations: [defaultOperation],\n  input: defaultInput,\n  focus: 0,\n};\n\nconst makeOperation = (id: string | number) => ({\n  ...defaultOperation,\n  id,\n  color: randomColor(),\n});\nconst findOperationById = (state: PatternState, id: number | string) =>\n  state.operations.find((op) => op.id === id);\n\nconst patternSlice = createSlice({\n  name: 'pattern',\n  initialState,\n  reducers: {\n    add(state) {\n      const id = ('' + Math.random()).slice(2);\n      const newOperation = makeOperation(id);\n      state.operations.push(newOperation);\n      state.focus = state.operations.length - 1;\n    },\n    remove(state, action: PayloadAction<{ id: number | string }>) {\n      const { id } = action.payload;\n      const idx = state.operations.findIndex((op) => op.id === id);\n\n      const last = idx === state.operations.length - 1;\n      const focused = idx === state.focus;\n      if ((focused && last) || idx < state.focus) {\n        state.focus--;\n      }\n\n      state.operations.splice(idx, 1);\n    },\n    move(state, action: PayloadAction<{ id: number | string; toIdx: number }>) {\n      const { id, toIdx } = action.payload;\n      const op = findOperationById(state, id);\n\n      if (toIdx > state.operations.length - 1 || toIdx < 0)\n        throw Error('move out of bounds');\n\n      if (!op) return;\n\n      const fromIdx = state.operations.indexOf(op);\n\n      if (toIdx === fromIdx) return;\n\n      state.operations.splice(fromIdx, 1);\n      state.operations.splice(toIdx, 0, op);\n\n      state.focus = toIdx;\n    },\n    setPattern(\n      state,\n      action: PayloadAction<{ id: number | string; pattern: string }>\n    ) {\n      const { id, pattern } = action.payload;\n      const op = findOperationById(state, id);\n      if (!op) return;\n      op.pattern = pattern;\n    },\n    setFlags(\n      state,\n      action: PayloadAction<{ id: number | string; flags: string[] }>\n    ) {\n      const { id, flags } = action.payload;\n      const op = findOperationById(state, id);\n      if (!op) return;\n      op.flags = flags;\n    },\n    setListFormat(\n      state,\n      action: PayloadAction<{ id: number | string; listFormat: string }>\n    ) {\n      const { id, listFormat } = action.payload;\n      const op = findOperationById(state, id);\n      if (!op) return;\n      op.listFormat = listFormat;\n    },\n    setReplace(\n      state,\n      action: PayloadAction<{ id: number | string; replace: string }>\n    ) {\n      const { id, replace } = action.payload;\n      const op = findOperationById(state, id);\n      if (!op) return;\n      op.replace = replace;\n    },\n    setInput(state, action: PayloadAction<{ value: string }>) {\n      state.input = action.payload.value;\n    },\n    setFocus(state, action: PayloadAction<{ idx: number }>) {\n      state.focus = action.payload.idx;\n    },\n  },\n});\n\nexport const {\n  add,\n  remove,\n  move,\n  setPattern,\n  setFlags,\n  setListFormat,\n  setReplace,\n  setInput,\n  setFocus,\n} = patternSlice.actions;\nexport { initialState, makeOperation };\nexport default patternSlice.reducer;\nexport type { PatternState };\n","import { createSelector } from '@reduxjs/toolkit';\nimport type { RootState } from '../../app/store';\n\nexport const selectOperations = (state: RootState) => state.pattern.operations;\nexport const selectOperationIds = createSelector(selectOperations, (state) =>\n  state.map((op) => op.id)\n);\nexport const selectOperation = (state: RootState, id: number | string) =>\n  state.pattern.operations.find((op) => op.id === id);\nexport const selectOperationPattern = createSelector(\n  selectOperation,\n  (op) => op?.pattern\n);\nexport const selectOperationFlags = createSelector(\n  selectOperation,\n  (op) => op?.flags\n);\nexport const selectOperationListFormat = createSelector(\n  selectOperation,\n  (op) => op?.listFormat\n);\nexport const selectOperationReplace = createSelector(\n  selectOperation,\n  (op) => op?.replace\n);\nexport const selectOperationColor = createSelector(\n  selectOperation,\n  (op) => op?.color\n);\n\nexport const selectInput = (state: RootState) => state.pattern.input;\nexport const selectFocus = (state: RootState) => state.pattern.focus;\n","interface TransformParameters {\n  input: string;\n  transforms: Array<{\n    formatter: (\n      pattern: string,\n      flags: string[],\n      input: string,\n      format: string\n    ) => string;\n    pattern: string;\n    flags: string[];\n    format: string;\n  }>;\n}\n\ninterface TransformResult {\n  result: string;\n  error: boolean;\n}\n\nconst transform = ({ input, transforms }: TransformParameters) =>\n  transforms.reduce(\n    (ag, { formatter, pattern, flags, format }): TransformResult[] => {\n      const prev = ag[ag.length - 1];\n      const inputString = prev?.result ?? input;\n      let error = null;\n      let result;\n      try {\n        result = formatter(pattern, flags, inputString, format);\n      } catch (e) {\n        error = e;\n        result = e.message;\n      }\n\n      return [...ag, {\n        result, \n        error,\n      }];\n    },\n    [] as TransformResult[]\n  );\n\nexport default transform;\n","import {\n  add,\n  remove,\n  move,\n  setPattern,\n  setFlags,\n  setListFormat,\n  setReplace,\n  setInput,\n  setFocus\n} from './patternSlice';\n\nexport { default as patternReducer } from './patternSlice';\nexport * as patternSelectors from './patternSelectors';\n\nexport const patternActions = {\n  add,\n  remove,\n  move,\n  setPattern,\n  setFlags,\n  setListFormat,\n  setReplace,\n  setInput,\n  setFocus,\n};\n\nexport { default as transform } from './transform';","import React from 'react';\nimport { PatternRow, ButtonRow, PatternRowType } from './components/Row';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { patternActions, patternSelectors } from '../pattern';\nimport './style.css';\n\nconst { add, remove, setPattern, setListFormat, setReplace, setFocus, setFlags } =\n  patternActions;\n\nconst { selectOperations, selectFocus } = patternSelectors;\n\ninterface PatternInputProps {\n  type: PatternRowType;\n}\n\nconst PatternInput = ({ type }: PatternInputProps) => {\n  const rows = useAppSelector(selectOperations);\n  const dispatch = useAppDispatch();\n\n  const focusIdx = useAppSelector(selectFocus);\n\n  return (\n    <form className=\"pattern-input\">\n      <ul className=\"pattern-input__list\">\n        {rows.map(({ id, pattern, flags, listFormat, replace, color }, idx) => (\n          <PatternRow\n            key={id}\n            type={type}\n            pattern={pattern}\n            flags={flags}\n            listFormat={listFormat}\n            replace={replace}\n            color={color}\n            focus={focusIdx === idx}\n            onClick={() => dispatch(setFocus({ idx }))}\n            onClickRemove={() => dispatch(remove({ id }))}\n            onChangePattern={(pattern: string) => {\n              dispatch(setPattern({ id, pattern }))\n            }}\n            onChangeFlags={(flags: string[]) => {\n              dispatch(setFlags({ id, flags }))\n            }}\n            onChangeListFormat={(listFormat: string) =>\n              dispatch(setListFormat({ id, listFormat }))\n            }\n            onChangeReplace={(replace: string) =>\n              dispatch(setReplace({ id, replace }))\n            }\n          />\n        ))}\n        <ButtonRow onClick={() => dispatch(add())} />\n      </ul>\n    </form>\n  );\n};\n\nexport default PatternInput;\n","interface MatchResult {\n  startIdx: number;\n  endIdx: number;\n  input: string;\n  match: string[];\n}\n\nconst unescapeString = (str: string) =>\nstr\n  .replace(/\\\\b/g, \"\\b\")\n  .replace(/\\\\f/g, \"\\f\")\n  .replace(/\\\\n/g, \"\\n\")\n  .replace(/\\\\r/g, \"\\r\")\n  .replace(/\\\\t/g, \"\\t\")\n  .replace(/\\\\v/g, \"\\v\")\n\nexport const match = (pattern: string, flags: string[], input: string): MatchResult[] => {\n  if(pattern === '') return [];\n  pattern = unescapeString(pattern);\n\n  const regex = new RegExp(pattern, flags.join(''));\n\n  let matches;\n  if (flags.indexOf('g') > -1) {\n    matches = input.matchAll(regex);\n  } else {\n    const match = regex.exec(input);\n    if (match === null) return [];\n    matches = [match];\n  }\n\n  return Array.from(matches, (v) => ({\n    startIdx: v.index as number,\n    endIdx: v[0].length + (v.index as number),\n    input: v.input as string,\n    match: [...v],\n  }));\n};\n\nexport const replace = (\n  pattern: string,\n  flags: string[],\n  input: string,\n  replaceWith: string\n) => {\n  pattern = unescapeString(pattern);\n  replaceWith = unescapeString(replaceWith);\n  const regex = new RegExp(pattern, flags.join(''));\n  return input.replace(regex, replaceWith);\n};\n\nexport const list = (\n  pattern: string,\n  flags: string[],\n  input: string,\n  format: string\n) => {\n  pattern = unescapeString(pattern);\n  format = unescapeString(format);\n\n  const matches = match(pattern, flags, input);\n  const formattedMatches = matches.map(\n    ({ match: [match, ...group], startIdx, endIdx }) =>\n      format.replace(\n        /\\$(&|\\d{1,2}|`|'|\\$)/g,\n        (specialPattern: string, p1: string) => {\n          if (specialPattern === '$&') {\n            return match;\n          } else if (\n            !isNaN(Number.parseFloat(p1)) &&\n            group[Number.parseInt(p1) - 1]\n          ) {\n            return group[Number.parseInt(p1) - 1];\n          } else if (specialPattern === '$`') {\n            return input.slice(0, startIdx);\n          } else if (specialPattern === \"$'\") {\n            return input.slice(endIdx);\n          } else if (specialPattern === '$$') {\n            return '$';\n          }\n\n          return specialPattern;\n        }\n      )\n  );\n\n  return formattedMatches.join('');\n};\n","function splitStringAtPairedIndicies(\n  str: string,\n  indices: Array<[number, number]>\n) {\n  const result = [];\n  let temp = 0;\n  for (const [startIdx, endIdx] of indices) {\n    if (temp < startIdx)\n      result.push({\n        value: str.slice(temp, startIdx),\n        inRange: false,\n      });\n    result.push({ value: str.slice(startIdx, endIdx), inRange: true });\n    temp = endIdx;\n  }\n\n  if (temp < str.length) {\n    result.push({ value: str.slice(temp, str.length), inRange: false });\n  }\n\n  return result;\n}\n\ntype SplitStringRange = ReturnType<typeof splitStringAtPairedIndicies>[number];\n\nexport default splitStringAtPairedIndicies;\nexport type { SplitStringRange };\n","import React from 'react';\nimport { OutputTextDisplay, InputTextDisplay } from './components/Display';\nimport './style.css';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { patternSelectors, patternActions, transform } from '../pattern';\nimport * as regex from '../../lib/regex';\n\nconst { selectOperations, selectInput, selectFocus } = patternSelectors;\nconst { setInput } = patternActions;\n\nenum TextDisplayType {\n  LIST,\n  REPLACE,\n  INPUT_ONLY,\n}\n\ninterface TextDisplayContainerProps {\n  type: TextDisplayType;\n}\n\nconst TextDisplayContainer = ({ type }: TextDisplayContainerProps) => {\n  const dispatch = useAppDispatch();\n  const isListMode = type === TextDisplayType.LIST;\n\n  const input = useAppSelector(selectInput);\n  const focusIdx = useAppSelector(selectFocus);\n\n  const ops = useAppSelector(selectOperations);\n\n  const results = transform({\n    input,\n    transforms: ops.map((op) => ({\n      formatter: isListMode ? regex.list : regex.replace,\n      pattern: op.pattern,\n      flags: op.flags,\n      format: isListMode ? op.listFormat : op.replace,\n    })),\n  });\n\n  const output = results[focusIdx]?.result ?? input;\n\n  const focusOp = ops[focusIdx];\n\n  const inputValue = [-1, 0].includes(focusIdx) \n  ? input\n  : results[focusIdx - 1].result;\n\n  return (\n    <div className=\"text-display__container\">\n      <InputTextDisplay\n        value={inputValue}\n        onChange={(v) => dispatch(setInput({ value: v }))}\n        pattern={focusOp?.pattern}\n        flags={focusOp?.flags}\n        color={focusOp?.color}\n        readOnly={![-1, 0].includes(focusIdx)}\n      />\n      {type !== TextDisplayType.INPUT_ONLY && (\n        <OutputTextDisplay value={output} />\n      )}\n    </div>\n  );\n};\n\nexport default TextDisplayContainer;\nexport { TextDisplayType };\n","import React from 'react';\nimport type { SplitStringRange } from '../../splitStringAtPairedIndicies';\nimport './style.css';\n\ninterface HighlightOverlayProps {\n  highlightRanges: SplitStringRange[];\n  highlightColor: string;\n}\n\nconst HighlightOverlay = React.forwardRef<null, HighlightOverlayProps>(\n  ({ highlightRanges, highlightColor }: HighlightOverlayProps, ref) => (\n    <div className=\"text-display__highlight-overlay\" ref={ref}>\n      {highlightRanges.map(({ inRange, value }, k) =>\n        inRange ? (\n          <mark key={k} style={{ background: highlightColor }}>\n            {value}\n          </mark>\n        ) : (\n          <span key={k}>{value}</span>\n        )\n      )}\n    </div>\n  )\n);\n\nexport default HighlightOverlay;\n","import React, { useRef } from 'react';\nimport TextDisplay, { TextDisplayType } from './TextDisplay';\nimport * as regex from '../../../../lib/regex';\nimport split from '../../splitStringAtPairedIndicies';\nimport HighlightOverlay from '../HighlightOverlay';\n\ninterface InputTextDisplayProps {\n  value: string;\n  pattern: string;\n  flags: string[];\n  color: string;\n  readOnly: boolean;\n  onChange: (str: string) => void;\n}\n\nconst InputTextDisplay = ({ value, pattern, flags, color, onChange, readOnly }: InputTextDisplayProps) => {\n\n  let matches: any[] = [];\n  try {\n    matches = regex.match(pattern, flags, value);\n  } catch (e) {\n    matches = [];\n  }\n\n  const highlightRanges = split(\n    value,\n    matches.map((m) => [m.startIdx, m.endIdx])\n  );\n\n  const overlayRef = useRef(null);\n  const textareaRef = useRef(null);\n\n  const handleScroll = () => {\n    const overlay = overlayRef.current as unknown as HTMLDivElement;\n    const textArea = textareaRef.current as unknown as HTMLTextAreaElement;\n    overlay.scrollTo(textArea.scrollLeft, textArea.scrollTop);\n  };\n\n  return (\n    <TextDisplay\n      type={TextDisplayType.INPUT}\n      value={value}\n      placeholder=\"Input text to search here.\"\n      ref={textareaRef}\n      onChange={onChange}\n      onScroll={handleScroll}\n      readOnly={readOnly}\n      before={\n        <HighlightOverlay\n          ref={overlayRef}\n          highlightRanges={highlightRanges}\n          highlightColor={color ?? '#FFFFFF'}\n        />\n      }\n    />\n  );\n};\n\nexport default InputTextDisplay;\n","const copyEs6 = async (text: string) => {\n  await navigator.clipboard.writeText(text);\n};\n\nconst copyLegacy = async (text: string) => {\n  const el = document.createElement('textarea');\n  document.body.appendChild(el);\n  el.value = \"\" + text;\n  el.select();\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(el);\n  }\n}\n\nconst copy = (text: string) => {\n  if(navigator.clipboard) return copyEs6(text);\n  else return copyLegacy(text);\n};\n\nexport default copy;\n","import React from 'react';\nimport TextDisplay, { TextDisplayType } from './TextDisplay';\nimport copy from '../../../../lib/copy';\n\ninterface OutputTextDisplayProps {\n  value: string;\n}\n\nconst CopyButton = ({ value }: { value: string }) => (\n  <button className=\"text-display__button--copy\" onClick={() => copy(value)}>\n    Copy\n  </button>\n);\n\nconst OutputTextDisplay = ({ value }: OutputTextDisplayProps) => {\n  return (\n    <TextDisplay\n      type={TextDisplayType.OUTPUT}\n      value={value}\n      after={value !== '' && <CopyButton value={value} />}\n      placeholder=\"Results appear here.\"\n    />\n  );\n};\n\nexport default OutputTextDisplay;\n","import React from 'react';\nimport PatternInput, { PatternRowType } from '../pattern-input';\nimport TextDisplay, { TextDisplayType } from '../text-display';\n\nconst HomeScreen = () => (\n  <>\n    <PatternInput type={PatternRowType.PATTERN_ONLY} />\n    <TextDisplay type={TextDisplayType.INPUT_ONLY} />\n  </>\n);\n\nexport default HomeScreen;\n","import React from 'react';\nimport PatternInput, { PatternRowType } from '../pattern-input';\nimport TextDisplay, { TextDisplayType } from '../text-display';\n\nconst ListMatchesScreen = () => (\n  <>\n    <PatternInput type={PatternRowType.PATTERN_LIST} />\n    <TextDisplay type={TextDisplayType.LIST} />\n  </>\n);\n\nexport default ListMatchesScreen;\n","import React from 'react';\nimport PatternInput, { PatternRowType } from '../pattern-input';\nimport TextDisplay, { TextDisplayType } from '../text-display';\n\nconst ReplaceScreen = () => (\n  <>\n    <PatternInput type={PatternRowType.PATTERN_REPLACE} />\n    <TextDisplay type={TextDisplayType.REPLACE} />\n  </>\n);\n\nexport default ReplaceScreen;\n","import React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport type { RouteComponentProps } from 'react-router-dom';\nimport './NotFoundScreen.css';\n\nconst NotFoundScreen = (props: RouteComponentProps) => (\n  <div className=\"not-found\">\n    <i className=\"not-found__icon fas fa-heart-broken\"></i>\n    <h3 className=\"not-found__title\">\n      Oops we couldn't find \n      <code>\n        {props.location.pathname}\n      </code>\n    </h3>\n    <Link to=\"/\">Go Home</Link>\n  </div>\n)\n\nexport default withRouter(NotFoundScreen);","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport HomeScreen from './HomeScreen';\nimport ListMatchesScreen from './ListMatchesScreen';\nimport ReplaceScreen from './ReplaceScreen';\nimport NotFoundScreen from '../not-found';\n\n\nconst Routes = () => (\n  <Switch>\n    <Route exact path=\"/match/\" component={HomeScreen} />\n    <Route path=\"/match/list\" component={ListMatchesScreen} />\n    <Route path=\"/match/replace\" component={ReplaceScreen} />\n    <Route component={NotFoundScreen} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport DashboardScreen from '../features/dashboard';\nimport NotFoundScreen from '../features/not-found';\n\nconst Routes = () => (\n  <Switch>\n    <Redirect exact path=\"/\" to=\"/match\" />\n    <Route path=\"/match\" component={DashboardScreen} />\n    <Route component={NotFoundScreen} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { TopNav, BottomNav } from '../features/navigation';\nimport Routes from './routes';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <TopNav />\n      <Routes />\n      <BottomNav />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { patternReducer } from '../features/pattern';\n\nexport const store = configureStore({\n  reducer: {\n    pattern: patternReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}